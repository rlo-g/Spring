# Spring Boot 환경설정 하는 파일 (DB, Tomcat 등)


# Tomcat Server Port 변경
server.port=8081

# Context Path 수정
# 기본 Context Path --> "/"
# ContextPath --> "/boot"로 수정
server.servlet.context-path=/boot

# DB 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/com
spring.datasource.username=com
spring.datasource.password=com01

# Spring JPA 설정 (JDBC -> API) -> Hibernate (Spring JPA 구현체)
# Spring에서는 Mapper Interface에서 추상메서드를 만들면 SqlSessionFactoryBean이 인터페이스를 구현시켜줌 (sql문은 개발자가 짬)
# Spring JPA에서는 Hibernate가 Sql Query 빌드를 자동 생성
#  - 사용 예시
#    Jpa클래스.save(vo)  -->  insert into Board(title, content, writer) values(#{title}, #{content}, #{writer}) 자동 처리
# 문제점 : 복잡한 쿼리는 개발자가 직접 짜야함 (장점 : 간단한 sql문은 알아서 작성해줌) 

#  ==> JPA/Hibernate  ORM 방식 (Object Relational Mapping) - 객체 관계 맵핑

# JPA 설정
# MySQL 상세 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
# 스키마 생성 (create, update)
#  - 테이블생성 create --> 생성 후 update 변경
spring.jpa.hibernate.ddl-auto=update     
# JPA가 실행하고 실행된 SQL문장 보기
spring.jpa.show-sql=true
# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 포맷팅해서 출력
spring.jpa.properties.format_sql=true


# Spring Boot ViewResolver 설정
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

