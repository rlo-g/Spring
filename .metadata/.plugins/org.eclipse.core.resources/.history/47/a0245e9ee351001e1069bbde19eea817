package kr.spring.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import kr.spring.entity.Board;
import kr.spring.mapper.BoardMapper;

// Rest 방식의 컨트롤러 import
@RestController
public class BoardRestController {

	// RestController
	// "비동기" 방식의 일만 처리하는 Controller
	// Rest 전송방식을 처리할 수 있다
	// - 요청 url + 전송방식(상태)을 묶어서 처리 가능 (똑같은 요청이지만 상태에 따라서 다르게 처리 가능)
	// 사용 이유 - url의 통일성 및 단순화
	
	@Autowired
	private BoardMapper mapper;   // MyBatis한테 JDBC(SQL문) 실행을 요청하는 객체

	
	
	// 게시글 목록 불러오기
	@RequestMapping("/boardList.do")
	public List<Board> boardList() {
		// 동기 방식과 함께 사용 시, 반드시 public 앞에 "@ResponseBody" 붙여줘야 "비동기" 방식 가능
		System.out.println("게시글 전체보기 기능 수행");
		List<Board> list = mapper.getLists();  // 게시글 정보 받아오기 -> List (arraylist 큰 범위)
		
		return list;  // view name(.jsp)이 아니라 json 형태의 데이터를 바로 돌려줌 
	}
		
	// 글쓰기 
	@RequestMapping("/boardInsert.do")
	public void boardInsert(Board board) {
		// 반환해줄 데이터가 없으므로 void
		// 함수를 통해 세개의 데이터(title, content, writer)가 넘어오므로 이를 하나의 Board 타입에 담아줌
		System.out.println("게시글 작성 기능 수행");
		mapper.boardInsert(board);
	}
	
	// 게시글 삭제
	@RequestMapping("/boardDelete.do")
	public void boardDelete(@RequestParam("idx") int idx) {
		System.out.println("게시글 삭제 기능 수행");
		mapper.boardDelete(idx);
	}
	
	// 게시글 수정
	@RequestMapping("/boardUpdate.do")
	public void boardUpdate(Board vo) {
		System.out.println("게시글 수정 기능 수행");
		mapper.boardUpdate(vo);
	}
	
	// 조회수
	@RequestMapping("/boardCount.do")
	public void boardCount(@RequestParam("idx") int idx) {
		System.out.println("조회수 기능 수행");
		mapper.boardCount(idx);
	}
}
